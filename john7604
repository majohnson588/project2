死循环实例
int和arr放在栈区存储，栈区使用习惯是先使用高地址空间，再使用低地址空间，
而arr中元素的存储是由低到高变化的，而越界访问有可能覆盖到i，有死循环的可能
int main()
{
    int i = 0;
    int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    //VC6.0 环境下 <=10 就死循环了
    //gcc 编辑器 <=11 就死循环了
    //VS2013      <=12 死循环
    for(i = 0; i <= 11; i++)
   {
           printf("hehe\n");
           arr[ i ] = 0;
    }
    system("pause");
    return 0;
}

结构的声明
    struct tag
    {
     member-list;
    }variable-list;
  //如描述一个学生-一些数据
  //名字
  //年龄
  //电话
  //性别

  //struct 结构体关键字    Stu - 结构体标签    struct Stu - 结构体类型
  struct Stu
  {
        //成员变量
        char name[20];
        short age;                                                  int                                        图纸
        char tele[12];              定义结构体类型
        char sex[5];
  }s1,s2,s3;//s1,s2,s3                 是三个全局的结构体变量                           盖房子
 
typedef struct Stu
{
    //成员变量
    char name[20];//名字
    short age;//年龄
    char tele[12];//电话
    char sex[5];//性别
    char id[20];//学号
 }s2;//类型(分号不能丢)

 int main()                                                                                    
{
 struct Stu s1 = {"旺财", 20, "15249287076", "保密"};                                           创建结构体变量
 Stu s2 = {"张三", 20 , "15249287076", "男"};//局部变量  
 return 0;                                                        int a = 10                                 房子       
}

结构成员的类型
结构的成员可以是标量、数组、指针，甚至是其他结构体

结构体变量的定义和初始化
有了结构体类型，那如何定义变量，其实很简单
struct Point
{
        int x;
        int y;
}p1;                                             //声明类型的同时定义变量p1
struct Point p2;                           //定义结构体变量p2

//初始化：定义变量的同时赋初值。
struct Point p3  =  {x , y};

struct Stu                                    //类型声明

struct S
{
      int a;
      char c;
      char arr[20];
      double d;
};

struct T
{
      char ch[10];
      struct S s;
      char *pc;
};

int main()
{
      char arr[ ] = "hello bit\n";
      struct T t = {"hehe",  {100, 'w', "hello world", 3.14}, arr};//结构体的嵌套
      printf("%s\n", t. ch);//hehe
      printf("%s\n", t. s. arr);//hello world
      printf("%lf\n", t .s .d);//3.14
      printf("%s\n", t .pc);//hello bit
      return 0;
}

结构体的访问
typedef struct Stu
{
      //成员变量
      char name[20];
      short age;
      char tele[12];
      char sex[5];
}Stu;//重命名，否则是struct Stu

void Print1(Stu tmp)
{
    printf("name: %s\n", tmp.name);
    printf("age:    %d\n", tmp.age);
    printf("tale:    %s\n", tmp.tele);
    printf("sex:    %s\n", tmp.sex);
}
void Print2(Stu* ps)
{
    printf("name: %s\n", ps->name);
    printf("age:   %d\n", ps->age);
    printf("tale:   %s\n", ps->tele);
    printf("sex:   %s\n", ps->sex);
}      
int main()
{
      Stu s = {"李四", 40, "15598886688", "男"};
      //打印结构体数据
      //Print1和Print2 哪个更好？
      Print1(s);
      Print2(&s);//用指针接收
      //Print2更好，函数传参时，参数是需要压栈的。如果传递一个结构体对象的时候，结构体过大，参数压栈的系统开销比较大，所以会导致性能的下降
     //结论：结构体传参的时候，要传结构体的地址
      return 0;
}

数据存储
Exercise1:
//输出什么
#include <stdio.h>
int main()
{
    char a = -1;
    //10000000000000000000000000000001
    //11111111111111111111111111111110
    //11111111111111111111111111111111
    //11111111
    //
    signed char b = -1;
    //11111111
    //
    unsigned char c = -1;//无符号
    //00000000000000000000000011111111整形提升
    //255
    printf("a=%d",b=%d,c=%d",a,b,c);//-1,-1,255
    return 0;
}

Exercise2:
//输出什么
#include <stdio.h>
int main()
{
      char a = -128;
      //10000000000000000000000010000000
      //11111111111111111111111101111111
      //11111111111111111111111110000000-补码
      //10000000首位为1，前面补1
      //11111111111111111111111110000000-补码（答案）
      //无符号数补码与原码相同
      printf("%u\n", a);
      //%d - 打印十进制的有符号数字
      //%u - 打印十进制的无符号数字
      return 0;
}

Exercise3:
int main()
{
      int i = -20;
      unsigned int j = 10;
      printf("%d\n", i+j); 
      //按照补码的形式进行运算，最后格式化成为有符号整数
      //10000000 00000000 00000000 00010100
      //11111111 11111111 11111111 11101011
      //11111111 11111111 11111111 11101100 - 补码
      //00000000 00000000 00000000 00001010 - 补码
      //11111111 11111111 11111111 11110110 - 结果
        11111111 11111111 11111111 11110101 
        10000000 00000000 00000000 00001010 - 答案是-10
        return 0;
}

Exercise4:
#include<windows.h>
int main()
{
      unsigned int i;
      for(i = 9;i >= 0;i--)
      {
             printf("%d\n", i);
      }
      return 0;
 }
 output:
 9
 8
 7
 6
 5
 4
 3
 2
 1
 0
 4294967295(-1的无符号数是一个超大数)
 4294967294
 4294967293
 4294967292
 ......
 
 Exercise5:
 //求下列输出
 int main()
 {
     char a[1000];
     int i;
     for(i = 0; i<1000; i++)
     {
         a[i] = -1 - i;
     }
     printf("%d", strlen(a));
     return 0;
  }
  答案是255
  有符号char存储范围是-127-128
  
  Exercise6:
  unsigned char i = 0;
  int main()
  {
      for(i = 0; i <= 255; i++)
      {
          printf("Hello world");
      }
      return 0;
   }
   答案是死循环
  
  指针进阶
  Exercise1:
  int main()
  {
        char arr1[] = "abcdef";
        char arr2[] = "abcdef";
        char* p1 = "abcdef";
        char *p2 = "abcdef";
        if(arr1 == arr2)
        {
            printf("hello\n");
        }
        else
        {
            printf("hi\n");
        }
        if(p1 == p2)
        {
            printf("hello\n");
        }
        else
        {
            printf("hi");
        }
        return 0;
  }
  output:
  hi
  hello
  
  Exercise2:
  //对以下指针数组和数组指针进行解引用操作
  int main()
  {
        char* arr[5];
        char* (*pa)[5] = &arr;
        
        int arr2[10] = { 0 };
        int (*pa2)[10] = &arr2;
        
        return 0;
   }

指针数组
Example1:
    int main()
   {
        int a = 10;
        int b = 20;
        int c = 30;
        int d = 40;
        int* arr[4] = {&a, &b, &c, &d};
        int i = 0;
        for(i = 0; i < 4; i++)
        {
                printf("%d ", *(arr[i]));
        }
        return 0;
   }
   
Example2:
  int main()
 {
      int arr1[ ] = { 1, 2, 3, 4, 5 };
      int arr2[ ] = { 2, 3, 4, 5, 6 };
      int arr3[ ] = { 3, 4, 5, 6, 7 };
      int* parr[ ] = { arr1, arr2, arr3 };
      int i = 0;
      for(i = 0;i < 3; i++)
      {
            int j = 0;
            for(j = 0;j < 5; i++)
            {
                  printf("%d ",*(parr[i] + j));
                  //printf("%d ",parr[i][j]);
            }
            printf("\n");
       }
      return 0;
 }
 
 数组指针
 Example1:
 形参写成指针的形式
 void print1(int* arr, int sz)
 {
     int i = 0;
     for(i = 0; i < sz; i++)
     {
         printf("%d ",arr[i]);
         //printf("%d ",*(arr+i));
     }
     printf("\n");
 }
 
 //用数组指针接收(不是推荐的写法)
 //void print1(int (*p)[10], int sz)
 //{
 //    int i = 0;
 //    for(i = 0; i < sz; i++)
 //    {   
 //        *p相当于数组名，数组名又是首元素的地址，所以*p就是&arr[0]    
 //        printf("%d ",*(*p + i));
 //    }
 //}
 
 int main()
 {
     int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
     //写一个函数打印arr数组的内容
     int sz = sizeod(arr) / sizeof(arr[0]);
     print1(arr,sz);
     //print1(&arr,sz);
     return 0;
 }
 
 

Example2:
//void print2(int arr[3][5], int c, int r)
void print2(int (*p)[5], int c, int r)
{
    int i = 0;
    for(i = 0; i < c; i++)
    {
        int j = 0;
        for(j = 0; j < r; j++)
        {   
            //p+i是指向第i行的
            //*(p+i)相当于拿到了第i行，也相当于第i行的数组名
            //数组名表示首元素的地址，*(p+i)就是第i行第一个元素的地址
            printf("%d ",*(*(p+i)+j));
            //printf("%d ", p[i][j]);
        }
        //arr[i]
        //*(arr+i)
        //
        //arr[i][j]
        //*(arr+i)[j]
        //*(*(arr+i)+j)
         printf("\n");
    }
}
int main()
{
    int arr[3][5] = { {1,2,3,4.5},{2,3,4,5,6},{3,4,5,6,7}};
    //int (*ptr)[3][5] = &arr;
    //写一个函数，打印arr数组
    print2(arr, 3, 5);//二维数组中首元素地址表示的是第一行的地址
    return 0;
}

数组传参和指针传参
Example1:
二维数组传参
void test(int arr[3][5])
{}
void test(int arr[][5])
{}
void test(int arr[][])//err 二维数组不能省略“列”
{}
void test(int *arr)//err
{}
void test(int* arr[5])//err
{}
void test(int **arr)//err
{}
void test (int(*p)[5])
{}
int main()
{
    int arr[3][5] = {0};
    test(arr);
}
Example2:
二级指针传参
void test(char ** ppc)
{
    ;
}
int main()
{
    char = 'a' ;
    char* pa = &a;
    char** ppa = &pa;//ppa就是一个二级指针
    return 0;
}

函数指针数组
Example:
实现一个可以进行四则运算的计算器
int Add (int x , int y)
{
    return x + y;
}
int Sub (int x , int y)
{
    return x - y;
}
int Mul (int x , int y)
{
    return x * y;
}
int Div (int x , int y)
{
    return x / y;
}
void menu()
{
    printf("***************************\n");
    printf("****  1.Add    2.Sub  ****\n");
    printf("****  3.Mul     4.Div   ****\n");
    printf("****  0.exit     ************\n");
    printf("***************************\n");
 }
int main()
{
   int input = 0;
   int x = 0;
   int y = 0;
   int ret = 0;
   int (* pfArr[5])(int,  int) = { 0, Add, Sub, Mul, Div};
   do
   {
        menu();
        printf("请选择:>");
        scanf("%d", &input);
        if(input == 0)
        {
                printf("退出计算器\n");
        }
        else if(input >= 1 && input <= 4)
        {
                  printf("请输入两个操作数:>");
                  scanf("%d %d", &x, &y);
                  ret = pfArr [input] (x , y);
                  printf("ret = %d\n", ret);
        }
          else
          {
                   printf("选择错误\n");
          }
     }  while  (input);
      return 0;
  }
  
qsort排序
struct Stu
{
      char name[20];
      int age;
      double score;
};

int cmp_stu_by_age(const void* e1, const void*e2)
{
      return ((struct Stu*)e1)->age - ((struct Stu*)e2)->age;
}

int cmp_stu_by_name(const void* e1, const void* e2)
{
      return strcmp(  ((struct Stu*)e1)->name, ((struct Stu*)e2)->name);
}

//abcdef
//abq

//使用qsort排序结构体
void test3()
{
      struct Stu arr[3] = {  {"zhangsan", 20, 55.5},{"list", 30, 88.0},{"wangyu", 10, 90.0} };
      int sz = sizeof(arr) / sizeof(arr[0]) ;
      //qsort(arr, sz, sizeof(arr[0]), cmp_stu_by_age);
      qsort(arr, sz, sizeof(arr[0]), cmp_stu_by_name);
}

//改进bubble_sort(仿qsort)
void test4()
{
    int arr[] = { 9,8,7,6,5,4,3,2,1,0 };
    //排序为升序
    int sz = sizeof(arr) / sizeof(arr[0]);
    //bubble_sort(arr, sz, sizeof(arr[0]),cmp_stu_by_name);
    //bubble_sort(arr, sz, sizeof(arr[0]),cmp_stu_by_age);
    bubble_sort(arr, sz, sizeof(arr[0]),cmp_int);
    print_arr(arr,sz);
}

void print_arr(int arr[], int sz)
{
    int i = 0;
    for(i=0; i<sz; i++)
    {
        printf("%d ",arr[i]);
    }
}

void bubble_sort(void* base, int num, int width, int (*cmp)(const void*e1, const void*e2))
{
      int i = 0;
      for(i = 0;i < num - 1; i++)
      {
          int j = 0;
          for(j=0; j<num-1-i;j++)
          {
            //if(arr[j]>arr[j+1])//比较
            if(cmp((char*)base + j*width, (char*)base + (j+1)*width>0)
            {
                //交换
                Swap((char*)base + j*width, (char*)base + (j+1)*width, width);
            }
          }
      }
}

cmp_int(const void* e1,const void* e2)
{
    return (*(int*)e1 - * (int*)e2);
}

void Swap(char* buf1,char* buf2, int width)
{
    int i = 0;
    for(i=0; i<width; i++)
    {
        char tmp = *buf1;
        *buf1 = *buf2;
        *buf2 = tmp;
        buf1++;
        buf2++;
    }
}
Practice1:
写一个函数统计二进制中1的个数
A1:
int Func1(int n)
{
   int i = 0;
   int count = 0;
   for(i=0; i<12; i++)
   {
       if({(n>>i) & 1) == 1)
       {
           count++;
       }
   }
    return count;
}

A2:
int Func2(int n)
{
    unsigned int m = n;
    int count = 0;
    while(m)
    {
        if(m % 2 == 1)
        count++;
        
        m /= 2;
    }
    return count;
}

A3:
int Func3(int n)
{
    int count = 0;
    while(n)
    {
        n = n & (n-1);
        //每次去掉一个“1”
        count++;
    }
    return count;
}

Practice2:
写一个函数判断n是否为2的幂次方
void Fun(int n)
{
    if(n & (n-1) == 0)
    printf("YES");
    else
    printf("NO");
}

Practice3:
求两个二进制数不同位的个数
A1:
int main()
{
    int m = 0;
    int n = 0;
    scanf("%d %d",&m ,&n);
    int i = 0;
    int diff = 0;
    for(i=0; i<32; i++)
    {
        if(((m>>1) & 1) != ((n>>1) & 1))
        {
            diff++;
        }
    }
    printf("%d\n",diff);
    return 0;
 }
 A2:
 int main()
 {
     int m = 0;
     int n = 0;
     scanf("%d %d", &m , &n);
     int i;
     int diff;
     int tmp = m^n;
     while(tmp)
     {
         tmp = tmp & (tmp-1);
         diff++;
     }
     printf("%d\n",diff);
     return 0;
 }
 
 Practice4:
 打印整数二进制的奇数位和偶数位
 int main()
 {
     int m = 0;
     scanf("%d", &m);
     int i = 0;
     //奇数位
     for(i=30; i>=0; i-=2)
     {
          printf("%d ",(m>>i) & 1);
     }
     printf("\n");
     
     //偶数位
     for(i=31; i>=1; i-=2)
     {
         printf("%d ",(m >>1) & 1);
     }
     return 0;
 }
 
 Practice5:
 求下列代码的输出值
 int main()
 {
     int arr[] = { 1,2,3,4,5 };
     short* p = (short*)arr;
     int i = 0;
     for(i = 0; i < 4; i++)
     {
         *(p + i) = 0;
     }
     
     for(i = 0; i < 5; i++)
     {
         printf("%d ", arr[i]);
     }
     return 0;
 }
 output
 0 0 3 4 5
 
 Practice6:
 求下列代码的输出值
 int main()
 {
     unsigned long pulArray[] = { 6,7,8,9,10 };
     unsigned long* pulPtr;
     pulPtr = pulArray
     *(pulPtr + 3) += 3;
     printf("%d, %d\n", *pulPtr, *(pulPtr + 3));
     return 0;
 }
 output
 6 12
 
 Practice7:
 求下列代码输出结果
 #include <stdio.h>
 int main()
 {
    int a = 0x11223344;
    //小端存储 44 33 22 11
    char* pc = (char*)&a;
    *pc = 0;
    printf("%x\n", a);
    return 0;
 }
 output 11223300
 
 void print(int* p, int sz)
 {
     int i = 0;
     for(i=0; i < sz; i++)
     {
        //printf("%d ",*(p+i));
        printf("%d ",*p);
        p++;
     }
     printf("\n");
 }
 int main()
 {
     int arr[] = { 1,2,3,4,5,6,7,8,9,10 };
     int sz = sizeof(arr) / sizeof(arr[0]);
     print(arr, sz);
     return 0;
 }
 
 Practice8:
 写一个函数逆置字符串的内容
 int main()
 {
     char arr[100] = {0};
     //I am a student
     gets(arr);
     //逆序
     //fgets(arr, 100, stdin);
     //scanf无法读取空格
     int len = strlen(arr);
     char* left = arr;
     char*right= arr+len-1;
     while(left<right)
    {
         char tmp = *left;
         *left = *right;
         *right = tmp;
         left++;
         right--;
    }
    printf("%s\n", arr);
    return 0;
}

Practice9:
求Sn=a+aa+aaa+aaaa+aaaaa的前5项之和，其中a是一个数字
int main()
{
    int a = 0;
    int n = 0;
    scanf("%d %d", &a, &n);//2 5
    int i = 0;
    int sum = 0;
    int k = 0;
    //2 + 22 + 222 + 2222 + 22222
    for(i=0; i<n; i++)
    {
        k = k * 10 + a;
        sum += k;
    }
    printf("%d\n", sum);
    return 0;
}

Practice10:
实现0~100000之间的所有“水仙花数”并输出
//水仙花数是指一个n位数，其各位数字的n次方之和正好等于该数本身，如:153 = 1^3 + 5^3 + 3^3,则153就是一个"水仙花数"
#include <math.h>
#include <stdio.h>
int main()
{
 int i = 0;
 for(i = 0; i <= 100000; i++)
 {
     //判断i是否为自幂数
     //1.计算i的位数 - n
     int n = 1;
     int tmp = i;
     while(tmp /= 10)
     {
         n++;
     }
     //2.计算每一位的n次方之和
     tmp = i;
     int sum = 0;
     while(tmp)//1234
     {
         sum += pow(tmp % 10, n);
         tmp /= 10;
     }
     //比较
     if(sum == i)
     {
         printf("%d ",i);
     }
 }
 return 0;
}

Practice11:
打印以下图形
      *
     ***
    *****
   *******
  *********
 ***********
*************
 ***********
  *********
   *******
    *****
     ***
      *
int main()
{
    int n = 0;
    scanf("%d", &n);
    //打印上半部分n
    int i = 0;
    for(i=0; i<n; i++)
    {
        //打印一行
        //打印空格
        int j = 0;
        for(j=0; j<n-1-i; j++)
        {
            printf(" ");
        }
        //打印*
        for(j=0; j<2*i+1;j++)
        {
            printf("*");
        }
        printf("\n");
    }
    //打印下半部分 n-1
     for(i=0; i<n-1; i++)
    {
        //打印一行
        //打印空格
        int j = 0;
        for(j=0; j<=i; j++)
        {
            printf(" ");
        }
        //打印*
        for(j=0; j < (n-1-i)*2-1;j++)
        {
            printf("*");
        }
        printf("\n");
    }
    return 0;
}

Practice12:
下面程序要求输出结构体成员a的数据以下不能填入横线处的内容是
#include <stdio.h>
struct
{
    int a;
    int b;
};
int main()
{
    struct S a, *p = &a;
    a.a = 99;
    printf("%d\n",_______);
    return 0;
}
题目内容
A. a.a
B. *p.a//err,"."优先级高于"*"
C. p->a
D. (*p).a

Practice13:
求下列输出结果
#include<stdio.h>
struct stu
{
    int num;
    char name[10];
    int age;
};
void fun(struct stu* p)
{
    printf("%s\n",(*p).name);
}
int main()
{
    struct stu students[3] = { {9801,"zhang",20},
                               {9802,"wang",19};
                               {9803,"zhao",18}
    };
    fun(students + 1);
    return 0;
}
output
wang

Practice14:
//喝汽水，1瓶汽水1元，2个空瓶可以换一瓶汽水，可以喝多少汽水(编程实现)。
int main()
{
    int money = 0;
    scanf("%d", &money);//20
    int total = money;
    int empty = money;
    
    //置换
    while(empty>=2)
    {
       total + = (empty/2);
       empty = empty / 2 + empty % 2;
    }
    printf("%d\n", total);
    return 0;
 }
 output
 39
 
 Practice15:
 写一个函数实现数组中奇数全部位于偶数前面
 void move(int arr[], int sz)
 {
   int left = 0;
   int right = sz - 1;
   
   while(left<right)
   {
     while((left < right) && arr[left] % 2 == 1)
     {
         left++;
     }
     while((left < right) && arr[right] % 2 == 0)
     {
         right--;
     }
     if(left < right)
     {
         int tmp = arr[left];
         arr[left] = arr[right];
         arr[right] = tmp;
     }
   }
 }
 int main()
 {
    int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
    int sz = sizeof(arr) / sizeof(arr[0]);
    return 0;
 }
 
 Practice16:
 求下列代码输出结果
 int main()
{
     unsigned char a = 200;
     //00000000000000000000000011001000
     //11001000 - a
     unsigned char a = 100;
     //00000000000000000000000001100100
     //01100100 - b
     
     unsigned chae c = 0;
     
     c = a + b;
     //a和b都要发生整形提升
     //存放到c中要发生截断的
     //
     //00000000000000000000000011001000
     //00000000000000000000000001100100
     //00000000000000000000000100101100
     //
     //00101100 - c
     //00000000000000000000000000101100 刚好丢了一个"1"(256)
     printf("%d %d", a + b, c);
     return 0;
}
output
300 44

Practice17:
求下列代码在32位大端模式处理器上的输出结果
大端存储为把高位放在低地址处，把低位放在高地址处
int main()
{
  unsigned int a = 0x1234;
  unsigned char b = *(unsigned char *)&a;
  return 0;
}
output:
0x00

Practice18:
打印10*10的杨辉三角
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
1 6 15 20 15 6 1
1 7 21 35 35 21 7 1
1 8 28 56 70 56 28 8 1
1 9 36 84 126 126 84 36 9 1
int main()
{
    int arr[10][10] = { 0 };
    int i = 0;
    //数组的初始化与赋值
    for(i=0; i<10; i++)
    {
        int j = 0;
        for(j=0; j<=i; j++)
        {
            if(j==0)
                arr[i][j] = 1;
            if(i==j)
                arr[i][j] = 1;
            if(i>=2 && j>=1)
                arr[i][j] = arr[i-1][j-1] + arr[i-1][j];
         //数组的打印
            printf("%d ",arr[i][j]);
        }
        printf("\n");
    }
    return 0;
}

Practice19:
某地发生了一件谋杀案，警察通过排查确定杀人凶手为4个嫌疑犯的一个
A说:不是我。
B说:是C。
C说:是D。
D说:C在胡说。
已知3个人说了真话，1个人说了假话
现在请根据这些信息，写一个程序来确定到底谁是凶手
初步通过反证法发现C是凶手
tips:程序输出1为真，0为假
int main()
{
    int Murderer = 0;
    //a b c d
    for(Murderer='A';Murderer<='D';Murderer++)
    {
        if((Murderer != 'A') + (Murderer == 'C') + (Murderer == 'D') + (Murderer != 'D') == 3)
        {
             printf("%c\n", Murderer);
        }        
    }
    return 0;
}

Practice20:
5位运动员参加了10米台跳水比赛，有人让他们预测比赛结果:

A选手说:B第二，我第三
B选手说:我第二，E第四
C选手说:我第一，D第二
D选手说:C最后，我第三
E选手说:我第四，A第一
比赛结束后，每位选手都说对了一半，请编程确定比赛的名次
int main()
{
    int a = 0;
    int b = 0;
    int c = 0;
    int d = 0;
    int e = 0;
    for(a=1; a<=5; a++)
    {
        for(b=1; b<=5; b++)
        {
            for(c=1; c<=5; c++)
            {
                for(d=1; d<=5; d++)
                {
                     for(e=1; e<=5; e++)
                     {
                         if((b==2) + (a==3) == 1)&&
                           ((b==2) + (e==4) == 1)&&
                           ((c==1) + (d==2) == 1)&&
                           ((c==5) + (d==3) == 1)&&
                           ((e==4) + (a==1) == 1))
                        {
                            //1*2*3*4*5 = 120
                            if(a*b*c*d*e == 120)
                                printf("a=%d b=%d c=%d d=%d e=%d\n", a, b, c, d, e);
                        }
                     }
                }
            }
        }
    }
    return 0;
 }

Practice21:
输入n，输出2的n次方(通过移位运算)
int main()
{
    int n;
    scanf("%d",&n);
    printf("%d\n",i<<n);
    return 0;
}

Practice22:
公务员面试现场打分。有7位考官，从键盘输入若干组成绩，每组7个分数(百分制),去掉一个最高分
和一个最低分,输出每组地平均成绩
int main()
{
    int i = 0;
    
    int score = 0;
    int max = 0;
    int min = 100;
    int sum = 0;
    
    while(scanf("&d", &score) != EOF)
    {
        n++;
        if(score>max)
            max = score;
        if(score<min)
            min = score;
        sum += score;
        if(n == 7)
        {
           printf("%.2f\n",(sum-max-min)/5.0);
           n = 0;
           sum = 0;
           max = 0;
           min = 100;
        }
    }
    return 0;
}

Practice23:
输入年份和月份，计算这一年这个月有多少天
//非闰年
//31 28 31 30 31 30 31 31 30 31 30 31
//闰年
//   29
int main()
{
    int month = 0;
    int year = 0;
    int days[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
    //while(scanf("%d %d", &year, &month) == 2)
    //while(scanf("%d %d", &year, &month) != EOF)
    while(~scanf("%d %d", &year, &month))
    {
        int day = days[month-1];
        if((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)//判断是否为闰年
        {
             if(month == 2)
                 day+=1;
        }
        printf("%d\n",day);
    }
    return 0;
}

Practice24:
求五位数中所有的Lily Number
(一个数如果拆分后的乘积之和等于自身，则是一个Lily Number，如655=6*55 + 65*5,1461=1*461+14*61+146*1)
#include <stdio.h>
#include <math.h>
int main()
{
    int i = 0;
    for(i=10000; i<=99999; i++)
    {
        //判断i是否为lily-number
        int sum = 0;
        int j = 0;
        //12345
        for(j=1; j<=4; j++)
        {
              int m = i%(int)pow(10, j);
              int n = i/(int)pow(10, j);
              sum += m*n;
        }
        if ( sum == i)
        {
            printf("%d ", i);
        }
        return 0;
}

Practice25:
从键盘任意输入一个字符，编程判断是否为字母（包括大小写）
$include <stdio.h>
int main()
{
    int ch = getchar();
    if((ch >= 'a' && ch<='z') ||  (ch>='A' && ch<='z'))
    {
        printf("YES\n");
    }
    else
    {
        printf("NO\n");
    }
    return 0;
}

Practice26:
编程实现字符串abcdef左旋k个字符
void left_move1(char arr[], int k)
{
    int len = strlen(arr);
    for(j=0; j<k%len; j++)
    {
        char tmp = arr[0];
        int i = 0;
        for( i=0; i<len-1; i++)
        {
             arr[i] = arr [ i + 1];
        }
        arr[len-1] = tmp;
     }
 }

void reverse(char* left, char* right)
{
    while(left < right)
    {
        char tmp = *left;
        *left = *right;
        *right = tmp;
        left++;
        right++;
    }
}

void left_move2(char arr[], int k)
{
    //abcdef
    int len = strlen(arr);
    k%=len;
    reverse(arr, arr+k-1);
    reverse(arr+k, arr+len-1);
    reverse(arr, arr+len-1);
}

int main()
{
    //左旋转字符代码
    char arr[20] = "abcdef";
    int k = 0;
    scanf("%d", &k);
    //left_move1(arr,k);
    left_move2(arr,k);
    return 0;
}

Practice27:
//有一个数字矩阵，矩阵的每行从左到右是递增的，矩阵从上到下是递增到，请编写程序在这样的矩阵中查找某个数字是否存在
//返回型参数
void find_k(int arr[3][3], int k, int *px, int *py)
{
    int x = 0;
    int y = *px - 1;
    int flag = 0;
    while(x<r && y>=0)
    {
        if(arr[x][y] < k)
        {
            x++;
        }
        else if (arr[x][y] > k)
        {
            y--;
        }
        else
        {
            *px = x;
            *py = y;
            return;
        }
    }
    //找不到
    *px = -1;
    *py = -1;
}

int main()
{
    int arr[3][3] = { 1,2,3,4,5,6,7,8,9 };
    int k = 12;
    int x = 3;
    int y = 3;
    
    find_k(arr, k, &x,&y);
    if( x == -1 && y==-1)
    {
        printf("找不到\n");
    }
    else
    {
        printf("找到了，下标是:%d %d\n", x, y);
    }
    return 0;
}

Practice28:
输入两个升序排列的序列，将两个序列合并一个有序序列并输出
#include <stdio.h>
int main()
{
    int n = 0;
    int m = 0;
    scanf("%d%d",&n,&m);
    int arr[n];//C99 可换成arr[1000]
    int arr[m];
    //接收第一个序列
    int i = 0;
    for(i=0; i<n; i++)
    {
        scanf("%d",&arr1[i]);
    }
    //接收第二个序列
    for(i=0; i<m; i++)
    {
        scanf("%d",&arr2[i]);
    }
    //有序合并打印
    i = 0;
    j = 0;
    while(i<n && j<m)
    {
        if(arr1[i] < arr2[j])
        {
            printf("%d ",arr1[i]);
            i++;
        }
        else
        {
            printf("%d ",arr2[j]);
            j++;
        }
    }
    if(i==n)
    {
        for(; j<m; j++)
        {
            printf("%d ", arr2[j]);
        }
    }
    else
    {
        for(; i<n; i++)
        {
            printf("%d ", arr1[i]);
        }
    }
    return 0;
}

Practice29:
//打印以下空心三角形
例如:输入为4
输出
*
* *
*   *
* * * *
int main()
{
    int n = 0;
    while(scanf("%d", &n) == 1)
    {
        int i = 0;
        int j = 0;
        for(i = 0;i < n; i++)
        {
            for(j = 0; j <= i; j++)
            {
                if(j == 0 || i== n-1 || i==j)
                    printf("* ");
                else
                    printf("  ");
            }
            printf("\n");
        }
   }
   return 0;
}
